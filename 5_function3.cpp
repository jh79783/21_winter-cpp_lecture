#include <iostream>
using namespace std;

// 함수
// > 오버헤드가 있다.
// - 함수를 호출하면, 함수 인자를 스택을 통해 전달하고, 해당하는 함수의 주소로 이동(점프)한다.
//   함수의 코드를 실행하고, 함수의 결과를 레지스터로 담아서 다시 복귀한다.

// C++은 함수를 호출하지 않고, 기계어 코드로 치환하는 문법을 제공한다.(인라인 함수)
// - 인라인 함수
// 장점: 호출이 아니라 치환이기때문에 속도가 빨라진다.
// 단점: 함수 기계어가 큰 경우, 전체적인 실행파일의 크기가 늘어난다.
//      => 코드 블로오트 현상이 발생할 수 있다.
// 따라서 인라인함수의 경우 복잡한 함수에서 사용하는것이 아니라 짧고 단순한 함수에서 사용한다.

// CPU
// > 레지스터(register): 명령어를 실행하는데 필요한 변수
// IP: Instruction Pointer
//  - 현재 실행중인 명령어의 주소
// SP: Stack Pointer
// BP: Base Pointer

inline int add(int a, int b) // -> 호출하는 부분에서 ret = 10 + 20 으로 기계어로 번역하여 붙여줌
{
    return a + b;
}

int main()
{
    int ret = add(10, 20);

    printf("%d\n", ret);
}